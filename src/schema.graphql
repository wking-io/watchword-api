# import * from './generated/prisma.graphql'

type Query {
  games(
    where: GameWhereInput
    orderBy: GameOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Game]!
  game(id: ID!): Game
  me: User
  patterns(
    where: PatternWhereInput
    orderBy: PatternOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Pattern]!
  pattern(pattern: PatternType!): Pattern
  sessions(
    where: SessionWhereInput
    orderBy: SessionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Session]!
  session(id: ID!): Session
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  user(id: ID!): User
  words(
    where: WordWhereInput
    orderBy: WordOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Word]!
  word(id: ID!): Word
}

type Mutation {
  createGame(input: GameInput!): Game!
  createPattern(input: PatternInput!): Pattern!
  createSession(input: SessionInput!): Session!
  createWord(input: WordInput!): Word!
  completeSession(id: ID!): Session!
  deleteGame(id: ID!): Game
  deletePattern(id: ID!): Pattern
  deleteSession(id: ID!): Session
  deleteWord(id: ID!): Word
  login(input: LoginInput!): AuthPayload
  recover(input: RecoverInput!): User
  reset(resetToken: String!, input: ResetInput!): AuthPayload!
  signup(input: SignupInput!): AuthPayload
  updateGame(id: ID!, input: GameInput!): Game
  updatePattern(id: ID!, input: PatternUpdateInput!): Pattern
  updateSession(id: ID!, input: SessionUpdateInput!): Session
  updateWord(id: ID!, input: WordUpdateInput!): Word
}

### TYPES ###

type SuccessMessage {
  message: String!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  games: [Game!]!
  role: UserRole!
}

### INPUTS ###

input GameInput {
  pattern: PatternType!
  focus: Focus!
  size: Int!
  words: [String!]!
  name: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RecoverInput {
  email: String!
}

input ResetInput {
  password: String!
}

input PatternInput {
  name: String!
  description: String!
  pattern: PatternType!
  focusType: FocusType!
}

input PatternUpdateInput {
  name: String
  description: String
  pattern: PatternType
  focusType: FocusType
}

input SessionInput {
  name: String!
  gameId: String!
}

input SessionUpdateInput {
  name: String
}

input SignupInput {
  name: String!
  email: String!
  password: String!
  confirmPassword: String!
}

input WordInput {
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

input WordUpdateInput {
  word: String
  group: String
  beginning: String
  ending: String
  vowel: String
}
