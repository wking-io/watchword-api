# source: https://us1.prisma.sh/contact/watchword/dev
# timestamp: Fri Jul 06 2018 07:52:06 GMT-0500 (CDT)

type AggregateGame {
  count: Int!
}

type AggregatePattern {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWord {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

enum Focus {
  Word
  Group
  Beginning
  Ending
  Vowel
}

enum FocusType {
  None
  All
  NoWord
}

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pattern(where: PatternWhereInput): Pattern!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  owner(where: UserWhereInput): User!
  focus: Focus!
  size: Int!
  words(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Word!]
  name: String!
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  focus: Focus!
  size: Int!
  name: String!
  pattern: PatternCreateOneWithoutGamesInput!
  sessions: SessionCreateManyWithoutGameInput
  owner: UserCreateOneWithoutGamesInput!
  words: WordCreateManyWithoutGamesInput
}

input GameCreateManyWithoutOwnerInput {
  create: [GameCreateWithoutOwnerInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutPatternInput {
  create: [GameCreateWithoutPatternInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutWordsInput {
  create: [GameCreateWithoutWordsInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutOwnerInput {
  focus: Focus!
  size: Int!
  name: String!
  pattern: PatternCreateOneWithoutGamesInput!
  sessions: SessionCreateManyWithoutGameInput
  words: WordCreateManyWithoutGamesInput
}

input GameCreateWithoutPatternInput {
  focus: Focus!
  size: Int!
  name: String!
  sessions: SessionCreateManyWithoutGameInput
  owner: UserCreateOneWithoutGamesInput!
  words: WordCreateManyWithoutGamesInput
}

input GameCreateWithoutSessionsInput {
  focus: Focus!
  size: Int!
  name: String!
  pattern: PatternCreateOneWithoutGamesInput!
  owner: UserCreateOneWithoutGamesInput!
  words: WordCreateManyWithoutGamesInput
}

input GameCreateWithoutWordsInput {
  focus: Focus!
  size: Int!
  name: String!
  pattern: PatternCreateOneWithoutGamesInput!
  sessions: SessionCreateManyWithoutGameInput
  owner: UserCreateOneWithoutGamesInput!
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  focus_ASC
  focus_DESC
  size_ASC
  size_DESC
  name_ASC
  name_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  focus: Focus!
  size: Int!
  name: String!
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  focus: Focus
  size: Int
  name: String
  pattern: PatternUpdateOneWithoutGamesInput
  sessions: SessionUpdateManyWithoutGameInput
  owner: UserUpdateOneWithoutGamesInput
  words: WordUpdateManyWithoutGamesInput
}

input GameUpdateManyWithoutOwnerInput {
  create: [GameCreateWithoutOwnerInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutOwnerInput!]
}

input GameUpdateManyWithoutPatternInput {
  create: [GameCreateWithoutPatternInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutPatternInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutPatternInput!]
}

input GameUpdateManyWithoutWordsInput {
  create: [GameCreateWithoutWordsInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutWordsInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutWordsInput!]
}

input GameUpdateOneWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
  delete: Boolean
  update: GameUpdateWithoutSessionsDataInput
  upsert: GameUpsertWithoutSessionsInput
}

input GameUpdateWithoutOwnerDataInput {
  focus: Focus
  size: Int
  name: String
  pattern: PatternUpdateOneWithoutGamesInput
  sessions: SessionUpdateManyWithoutGameInput
  words: WordUpdateManyWithoutGamesInput
}

input GameUpdateWithoutPatternDataInput {
  focus: Focus
  size: Int
  name: String
  sessions: SessionUpdateManyWithoutGameInput
  owner: UserUpdateOneWithoutGamesInput
  words: WordUpdateManyWithoutGamesInput
}

input GameUpdateWithoutSessionsDataInput {
  focus: Focus
  size: Int
  name: String
  pattern: PatternUpdateOneWithoutGamesInput
  owner: UserUpdateOneWithoutGamesInput
  words: WordUpdateManyWithoutGamesInput
}

input GameUpdateWithoutWordsDataInput {
  focus: Focus
  size: Int
  name: String
  pattern: PatternUpdateOneWithoutGamesInput
  sessions: SessionUpdateManyWithoutGameInput
  owner: UserUpdateOneWithoutGamesInput
}

input GameUpdateWithWhereUniqueWithoutOwnerInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutOwnerDataInput!
}

input GameUpdateWithWhereUniqueWithoutPatternInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutPatternDataInput!
}

input GameUpdateWithWhereUniqueWithoutWordsInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutWordsDataInput!
}

input GameUpsertWithoutSessionsInput {
  update: GameUpdateWithoutSessionsDataInput!
  create: GameCreateWithoutSessionsInput!
}

input GameUpsertWithWhereUniqueWithoutOwnerInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutOwnerDataInput!
  create: GameCreateWithoutOwnerInput!
}

input GameUpsertWithWhereUniqueWithoutPatternInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutPatternDataInput!
  create: GameCreateWithoutPatternInput!
}

input GameUpsertWithWhereUniqueWithoutWordsInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutWordsDataInput!
  create: GameCreateWithoutWordsInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  focus: Focus

  """All values that are not equal to given value."""
  focus_not: Focus

  """All values that are contained in given list."""
  focus_in: [Focus!]

  """All values that are not contained in given list."""
  focus_not_in: [Focus!]
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  pattern: PatternWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
  owner: UserWhereInput
  words_every: WordWhereInput
  words_some: WordWhereInput
  words_none: WordWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPattern(data: PatternCreateInput!): Pattern!
  createGame(data: GameCreateInput!): Game!
  createSession(data: SessionCreateInput!): Session!
  createWord(data: WordCreateInput!): Word!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePattern(data: PatternUpdateInput!, where: PatternWhereUniqueInput!): Pattern
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateWord(data: WordUpdateInput!, where: WordWhereUniqueInput!): Word
  deleteUser(where: UserWhereUniqueInput!): User
  deletePattern(where: PatternWhereUniqueInput!): Pattern
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteWord(where: WordWhereUniqueInput!): Word
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPattern(where: PatternWhereUniqueInput!, create: PatternCreateInput!, update: PatternUpdateInput!): Pattern!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertWord(where: WordWhereUniqueInput!, create: WordCreateInput!, update: WordUpdateInput!): Word!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPatterns(data: PatternUpdateInput!, where: PatternWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateInput!, where: GameWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateInput!, where: SessionWhereInput): BatchPayload!
  updateManyWords(data: WordUpdateInput!, where: WordWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPatterns(where: PatternWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyWords(where: WordWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pattern implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  pattern: PatternType!
  focusType: FocusType!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

"""A connection to a list of items."""
type PatternConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatternEdge]!
  aggregate: AggregatePattern!
}

input PatternCreateInput {
  name: String!
  description: String!
  pattern: PatternType!
  focusType: FocusType!
  games: GameCreateManyWithoutPatternInput
}

input PatternCreateOneWithoutGamesInput {
  create: PatternCreateWithoutGamesInput
  connect: PatternWhereUniqueInput
}

input PatternCreateWithoutGamesInput {
  name: String!
  description: String!
  pattern: PatternType!
  focusType: FocusType!
}

"""An edge in a connection."""
type PatternEdge {
  """The item at the end of the edge."""
  node: Pattern!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatternOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  pattern_ASC
  pattern_DESC
  focusType_ASC
  focusType_DESC
}

type PatternPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  pattern: PatternType!
  focusType: FocusType!
}

type PatternSubscriptionPayload {
  mutation: MutationType!
  node: Pattern
  updatedFields: [String!]
  previousValues: PatternPreviousValues
}

input PatternSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatternSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatternSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatternSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatternWhereInput
}

enum PatternType {
  Connect
  Filter
  Identify
  Memorize
  Order
}

input PatternUpdateInput {
  name: String
  description: String
  pattern: PatternType
  focusType: FocusType
  games: GameUpdateManyWithoutPatternInput
}

input PatternUpdateOneWithoutGamesInput {
  create: PatternCreateWithoutGamesInput
  connect: PatternWhereUniqueInput
  delete: Boolean
  update: PatternUpdateWithoutGamesDataInput
  upsert: PatternUpsertWithoutGamesInput
}

input PatternUpdateWithoutGamesDataInput {
  name: String
  description: String
  pattern: PatternType
  focusType: FocusType
}

input PatternUpsertWithoutGamesInput {
  update: PatternUpdateWithoutGamesDataInput!
  create: PatternCreateWithoutGamesInput!
}

input PatternWhereInput {
  """Logical AND on all given filters."""
  AND: [PatternWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatternWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatternWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  pattern: PatternType

  """All values that are not equal to given value."""
  pattern_not: PatternType

  """All values that are contained in given list."""
  pattern_in: [PatternType!]

  """All values that are not contained in given list."""
  pattern_not_in: [PatternType!]
  focusType: FocusType

  """All values that are not equal to given value."""
  focusType_not: FocusType

  """All values that are contained in given list."""
  focusType_in: [FocusType!]

  """All values that are not contained in given list."""
  focusType_not_in: [FocusType!]
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
}

input PatternWhereUniqueInput {
  id: ID
  pattern: PatternType
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  patterns(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pattern]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  words(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Word]!
  user(where: UserWhereUniqueInput!): User
  pattern(where: PatternWhereUniqueInput!): Pattern
  game(where: GameWhereUniqueInput!): Game
  session(where: SessionWhereUniqueInput!): Session
  word(where: WordWhereUniqueInput!): Word
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  patternsConnection(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatternConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  wordsConnection(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WordConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Session implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  complete: Boolean!
  completedAt: DateTime!
  game(where: GameWhereInput): Game!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  name: String!
  complete: Boolean!
  completedAt: DateTime!
  game: GameCreateOneWithoutSessionsInput!
}

input SessionCreateManyWithoutGameInput {
  create: [SessionCreateWithoutGameInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateWithoutGameInput {
  name: String!
  complete: Boolean!
  completedAt: DateTime!
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  complete_ASC
  complete_DESC
  completedAt_ASC
  completedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  complete: Boolean!
  completedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  name: String
  complete: Boolean
  completedAt: DateTime
  game: GameUpdateOneWithoutSessionsInput
}

input SessionUpdateManyWithoutGameInput {
  create: [SessionCreateWithoutGameInput!]
  connect: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutGameInput!]
}

input SessionUpdateWithoutGameDataInput {
  name: String
  complete: Boolean
  completedAt: DateTime
}

input SessionUpdateWithWhereUniqueWithoutGameInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutGameDataInput!
}

input SessionUpsertWithWhereUniqueWithoutGameInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutGameDataInput!
  create: SessionCreateWithoutGameInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  complete: Boolean

  """All values that are not equal to given value."""
  complete_not: Boolean
  completedAt: DateTime

  """All values that are not equal to given value."""
  completedAt_not: DateTime

  """All values that are contained in given list."""
  completedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  completedAt_not_in: [DateTime!]

  """All values less than the given value."""
  completedAt_lt: DateTime

  """All values less than or equal the given value."""
  completedAt_lte: DateTime

  """All values greater than the given value."""
  completedAt_gt: DateTime

  """All values greater than or equal the given value."""
  completedAt_gte: DateTime
  game: GameWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  pattern(where: PatternSubscriptionWhereInput): PatternSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  word(where: WordSubscriptionWhereInput): WordSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  resetToken: String
  resetExpires: DateTime
  role: UserRole!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetExpires: DateTime
  role: UserRole!
  games: GameCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGamesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetExpires: DateTime
  role: UserRole!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetExpires_ASC
  resetExpires_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetExpires: DateTime
  role: UserRole!
}

enum UserRole {
  Admin
  Teacher
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetExpires: DateTime
  role: UserRole
  games: GameUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutGamesDataInput
  upsert: UserUpsertWithoutGamesInput
}

input UserUpdateWithoutGamesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetExpires: DateTime
  role: UserRole
}

input UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetExpires: DateTime

  """All values that are not equal to given value."""
  resetExpires_not: DateTime

  """All values that are contained in given list."""
  resetExpires_in: [DateTime!]

  """All values that are not contained in given list."""
  resetExpires_not_in: [DateTime!]

  """All values less than the given value."""
  resetExpires_lt: DateTime

  """All values less than or equal the given value."""
  resetExpires_lte: DateTime

  """All values greater than the given value."""
  resetExpires_gt: DateTime

  """All values greater than or equal the given value."""
  resetExpires_gte: DateTime
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  resetToken: String
}

type Word implements Node {
  id: ID!
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

"""A connection to a list of items."""
type WordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WordEdge]!
  aggregate: AggregateWord!
}

input WordCreateInput {
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
  games: GameCreateManyWithoutWordsInput
}

input WordCreateManyWithoutGamesInput {
  create: [WordCreateWithoutGamesInput!]
  connect: [WordWhereUniqueInput!]
}

input WordCreateWithoutGamesInput {
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

"""An edge in a connection."""
type WordEdge {
  """The item at the end of the edge."""
  node: Word!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WordOrderByInput {
  id_ASC
  id_DESC
  word_ASC
  word_DESC
  group_ASC
  group_DESC
  beginning_ASC
  beginning_DESC
  ending_ASC
  ending_DESC
  vowel_ASC
  vowel_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WordPreviousValues {
  id: ID!
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

type WordSubscriptionPayload {
  mutation: MutationType!
  node: Word
  updatedFields: [String!]
  previousValues: WordPreviousValues
}

input WordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WordWhereInput
}

input WordUpdateInput {
  word: String
  group: String
  beginning: String
  ending: String
  vowel: String
  games: GameUpdateManyWithoutWordsInput
}

input WordUpdateManyWithoutGamesInput {
  create: [WordCreateWithoutGamesInput!]
  connect: [WordWhereUniqueInput!]
  disconnect: [WordWhereUniqueInput!]
  delete: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutGamesInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutGamesInput!]
}

input WordUpdateWithoutGamesDataInput {
  word: String
  group: String
  beginning: String
  ending: String
  vowel: String
}

input WordUpdateWithWhereUniqueWithoutGamesInput {
  where: WordWhereUniqueInput!
  data: WordUpdateWithoutGamesDataInput!
}

input WordUpsertWithWhereUniqueWithoutGamesInput {
  where: WordWhereUniqueInput!
  update: WordUpdateWithoutGamesDataInput!
  create: WordCreateWithoutGamesInput!
}

input WordWhereInput {
  """Logical AND on all given filters."""
  AND: [WordWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  word: String

  """All values that are not equal to given value."""
  word_not: String

  """All values that are contained in given list."""
  word_in: [String!]

  """All values that are not contained in given list."""
  word_not_in: [String!]

  """All values less than the given value."""
  word_lt: String

  """All values less than or equal the given value."""
  word_lte: String

  """All values greater than the given value."""
  word_gt: String

  """All values greater than or equal the given value."""
  word_gte: String

  """All values containing the given string."""
  word_contains: String

  """All values not containing the given string."""
  word_not_contains: String

  """All values starting with the given string."""
  word_starts_with: String

  """All values not starting with the given string."""
  word_not_starts_with: String

  """All values ending with the given string."""
  word_ends_with: String

  """All values not ending with the given string."""
  word_not_ends_with: String
  group: String

  """All values that are not equal to given value."""
  group_not: String

  """All values that are contained in given list."""
  group_in: [String!]

  """All values that are not contained in given list."""
  group_not_in: [String!]

  """All values less than the given value."""
  group_lt: String

  """All values less than or equal the given value."""
  group_lte: String

  """All values greater than the given value."""
  group_gt: String

  """All values greater than or equal the given value."""
  group_gte: String

  """All values containing the given string."""
  group_contains: String

  """All values not containing the given string."""
  group_not_contains: String

  """All values starting with the given string."""
  group_starts_with: String

  """All values not starting with the given string."""
  group_not_starts_with: String

  """All values ending with the given string."""
  group_ends_with: String

  """All values not ending with the given string."""
  group_not_ends_with: String
  beginning: String

  """All values that are not equal to given value."""
  beginning_not: String

  """All values that are contained in given list."""
  beginning_in: [String!]

  """All values that are not contained in given list."""
  beginning_not_in: [String!]

  """All values less than the given value."""
  beginning_lt: String

  """All values less than or equal the given value."""
  beginning_lte: String

  """All values greater than the given value."""
  beginning_gt: String

  """All values greater than or equal the given value."""
  beginning_gte: String

  """All values containing the given string."""
  beginning_contains: String

  """All values not containing the given string."""
  beginning_not_contains: String

  """All values starting with the given string."""
  beginning_starts_with: String

  """All values not starting with the given string."""
  beginning_not_starts_with: String

  """All values ending with the given string."""
  beginning_ends_with: String

  """All values not ending with the given string."""
  beginning_not_ends_with: String
  ending: String

  """All values that are not equal to given value."""
  ending_not: String

  """All values that are contained in given list."""
  ending_in: [String!]

  """All values that are not contained in given list."""
  ending_not_in: [String!]

  """All values less than the given value."""
  ending_lt: String

  """All values less than or equal the given value."""
  ending_lte: String

  """All values greater than the given value."""
  ending_gt: String

  """All values greater than or equal the given value."""
  ending_gte: String

  """All values containing the given string."""
  ending_contains: String

  """All values not containing the given string."""
  ending_not_contains: String

  """All values starting with the given string."""
  ending_starts_with: String

  """All values not starting with the given string."""
  ending_not_starts_with: String

  """All values ending with the given string."""
  ending_ends_with: String

  """All values not ending with the given string."""
  ending_not_ends_with: String
  vowel: String

  """All values that are not equal to given value."""
  vowel_not: String

  """All values that are contained in given list."""
  vowel_in: [String!]

  """All values that are not contained in given list."""
  vowel_not_in: [String!]

  """All values less than the given value."""
  vowel_lt: String

  """All values less than or equal the given value."""
  vowel_lte: String

  """All values greater than the given value."""
  vowel_gt: String

  """All values greater than or equal the given value."""
  vowel_gte: String

  """All values containing the given string."""
  vowel_contains: String

  """All values not containing the given string."""
  vowel_not_contains: String

  """All values starting with the given string."""
  vowel_starts_with: String

  """All values not starting with the given string."""
  vowel_not_starts_with: String

  """All values ending with the given string."""
  vowel_ends_with: String

  """All values not ending with the given string."""
  vowel_not_ends_with: String
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
}

input WordWhereUniqueInput {
  id: ID
  word: String
}
