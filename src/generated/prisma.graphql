# source: https://us1.prisma.sh/william-king-4b9a55/school-app/dev
# timestamp: Mon May 21 2018 09:52:43 GMT-0500 (CDT)

type AggregateExercise {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWord {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Exercise implements Node {
  id: ID!
  game(where: GameWhereInput): Game!
  views: Int!
  completed: Int!
  owner(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ExerciseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  views: Int
  completed: Int
  game: GameCreateOneInput!
  owner: UserCreateOneWithoutExercisesInput!
}

input ExerciseCreateManyWithoutOwnerInput {
  create: [ExerciseCreateWithoutOwnerInput!]
  connect: [ExerciseWhereUniqueInput!]
}

input ExerciseCreateWithoutOwnerInput {
  views: Int
  completed: Int
  game: GameCreateOneInput!
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  views_ASC
  views_DESC
  completed_ASC
  completed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  views: Int!
  completed: Int!
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
}

input ExerciseUpdateInput {
  views: Int
  completed: Int
  game: GameUpdateOneInput
  owner: UserUpdateOneWithoutExercisesInput
}

input ExerciseUpdateManyWithoutOwnerInput {
  create: [ExerciseCreateWithoutOwnerInput!]
  connect: [ExerciseWhereUniqueInput!]
  disconnect: [ExerciseWhereUniqueInput!]
  delete: [ExerciseWhereUniqueInput!]
  update: [ExerciseUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [ExerciseUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ExerciseUpdateWithoutOwnerDataInput {
  views: Int
  completed: Int
  game: GameUpdateOneInput
}

input ExerciseUpdateWithWhereUniqueWithoutOwnerInput {
  where: ExerciseWhereUniqueInput!
  data: ExerciseUpdateWithoutOwnerDataInput!
}

input ExerciseUpsertWithWhereUniqueWithoutOwnerInput {
  where: ExerciseWhereUniqueInput!
  update: ExerciseUpdateWithoutOwnerDataInput!
  create: ExerciseCreateWithoutOwnerInput!
}

input ExerciseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  views: Int

  """All values that are not equal to given value."""
  views_not: Int

  """All values that are contained in given list."""
  views_in: [Int!]

  """All values that are not contained in given list."""
  views_not_in: [Int!]

  """All values less than the given value."""
  views_lt: Int

  """All values less than or equal the given value."""
  views_lte: Int

  """All values greater than the given value."""
  views_gt: Int

  """All values greater than or equal the given value."""
  views_gte: Int
  completed: Int

  """All values that are not equal to given value."""
  completed_not: Int

  """All values that are contained in given list."""
  completed_in: [Int!]

  """All values that are not contained in given list."""
  completed_not_in: [Int!]

  """All values less than the given value."""
  completed_lt: Int

  """All values less than or equal the given value."""
  completed_lte: Int

  """All values greater than the given value."""
  completed_gt: Int

  """All values greater than or equal the given value."""
  completed_gte: Int
  game: GameWhereInput
  owner: UserWhereInput
}

input ExerciseWhereUniqueInput {
  id: ID
}

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String!
  slug: String!
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String!
  description: String!
  slug: String!
}

input GameCreateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  slug_ASC
  slug_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String!
  slug: String!
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateDataInput {
  name: String
  description: String
  slug: String
}

input GameUpdateInput {
  name: String
  description: String
  slug: String
}

input GameUpdateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  delete: Boolean
  update: GameUpdateDataInput
  upsert: GameUpsertNestedInput
}

input GameUpsertNestedInput {
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
}

input GameWhereUniqueInput {
  id: ID
  slug: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGame(data: GameCreateInput!): Game!
  createExercise(data: ExerciseCreateInput!): Exercise!
  createWord(data: WordCreateInput!): Word!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  updateWord(data: WordUpdateInput!, where: WordWhereUniqueInput!): Word
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteWord(where: WordWhereUniqueInput!): Word
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  upsertWord(where: WordWhereUniqueInput!, create: WordCreateInput!, update: WordUpdateInput!): Word!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateInput!, where: GameWhereInput): BatchPayload!
  updateManyExercises(data: ExerciseUpdateInput!, where: ExerciseWhereInput): BatchPayload!
  updateManyWords(data: WordUpdateInput!, where: WordWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
  deleteManyWords(where: WordWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  words(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Word]!
  user(where: UserWhereUniqueInput!): User
  game(where: GameWhereUniqueInput!): Game
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  word(where: WordWhereUniqueInput!): Word
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!
  wordsConnection(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WordConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
  word(where: WordSubscriptionWhereInput): WordSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  exercises: ExerciseCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutExercisesInput {
  create: UserCreateWithoutExercisesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutExercisesInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  exercises: ExerciseUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutExercisesInput {
  create: UserCreateWithoutExercisesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutExercisesDataInput
  upsert: UserUpsertWithoutExercisesInput
}

input UserUpdateWithoutExercisesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutExercisesInput {
  update: UserUpdateWithoutExercisesDataInput!
  create: UserCreateWithoutExercisesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Word implements Node {
  id: ID!
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

"""A connection to a list of items."""
type WordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WordEdge]!
  aggregate: AggregateWord!
}

input WordCreateInput {
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

"""An edge in a connection."""
type WordEdge {
  """The item at the end of the edge."""
  node: Word!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WordOrderByInput {
  id_ASC
  id_DESC
  word_ASC
  word_DESC
  group_ASC
  group_DESC
  beginning_ASC
  beginning_DESC
  ending_ASC
  ending_DESC
  vowel_ASC
  vowel_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WordPreviousValues {
  id: ID!
  word: String!
  group: String!
  beginning: String!
  ending: String!
  vowel: String!
}

type WordSubscriptionPayload {
  mutation: MutationType!
  node: Word
  updatedFields: [String!]
  previousValues: WordPreviousValues
}

input WordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WordWhereInput
}

input WordUpdateInput {
  word: String
  group: String
  beginning: String
  ending: String
  vowel: String
}

input WordWhereInput {
  """Logical AND on all given filters."""
  AND: [WordWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  word: String

  """All values that are not equal to given value."""
  word_not: String

  """All values that are contained in given list."""
  word_in: [String!]

  """All values that are not contained in given list."""
  word_not_in: [String!]

  """All values less than the given value."""
  word_lt: String

  """All values less than or equal the given value."""
  word_lte: String

  """All values greater than the given value."""
  word_gt: String

  """All values greater than or equal the given value."""
  word_gte: String

  """All values containing the given string."""
  word_contains: String

  """All values not containing the given string."""
  word_not_contains: String

  """All values starting with the given string."""
  word_starts_with: String

  """All values not starting with the given string."""
  word_not_starts_with: String

  """All values ending with the given string."""
  word_ends_with: String

  """All values not ending with the given string."""
  word_not_ends_with: String
  group: String

  """All values that are not equal to given value."""
  group_not: String

  """All values that are contained in given list."""
  group_in: [String!]

  """All values that are not contained in given list."""
  group_not_in: [String!]

  """All values less than the given value."""
  group_lt: String

  """All values less than or equal the given value."""
  group_lte: String

  """All values greater than the given value."""
  group_gt: String

  """All values greater than or equal the given value."""
  group_gte: String

  """All values containing the given string."""
  group_contains: String

  """All values not containing the given string."""
  group_not_contains: String

  """All values starting with the given string."""
  group_starts_with: String

  """All values not starting with the given string."""
  group_not_starts_with: String

  """All values ending with the given string."""
  group_ends_with: String

  """All values not ending with the given string."""
  group_not_ends_with: String
  beginning: String

  """All values that are not equal to given value."""
  beginning_not: String

  """All values that are contained in given list."""
  beginning_in: [String!]

  """All values that are not contained in given list."""
  beginning_not_in: [String!]

  """All values less than the given value."""
  beginning_lt: String

  """All values less than or equal the given value."""
  beginning_lte: String

  """All values greater than the given value."""
  beginning_gt: String

  """All values greater than or equal the given value."""
  beginning_gte: String

  """All values containing the given string."""
  beginning_contains: String

  """All values not containing the given string."""
  beginning_not_contains: String

  """All values starting with the given string."""
  beginning_starts_with: String

  """All values not starting with the given string."""
  beginning_not_starts_with: String

  """All values ending with the given string."""
  beginning_ends_with: String

  """All values not ending with the given string."""
  beginning_not_ends_with: String
  ending: String

  """All values that are not equal to given value."""
  ending_not: String

  """All values that are contained in given list."""
  ending_in: [String!]

  """All values that are not contained in given list."""
  ending_not_in: [String!]

  """All values less than the given value."""
  ending_lt: String

  """All values less than or equal the given value."""
  ending_lte: String

  """All values greater than the given value."""
  ending_gt: String

  """All values greater than or equal the given value."""
  ending_gte: String

  """All values containing the given string."""
  ending_contains: String

  """All values not containing the given string."""
  ending_not_contains: String

  """All values starting with the given string."""
  ending_starts_with: String

  """All values not starting with the given string."""
  ending_not_starts_with: String

  """All values ending with the given string."""
  ending_ends_with: String

  """All values not ending with the given string."""
  ending_not_ends_with: String
  vowel: String

  """All values that are not equal to given value."""
  vowel_not: String

  """All values that are contained in given list."""
  vowel_in: [String!]

  """All values that are not contained in given list."""
  vowel_not_in: [String!]

  """All values less than the given value."""
  vowel_lt: String

  """All values less than or equal the given value."""
  vowel_lte: String

  """All values greater than the given value."""
  vowel_gt: String

  """All values greater than or equal the given value."""
  vowel_gte: String

  """All values containing the given string."""
  vowel_contains: String

  """All values not containing the given string."""
  vowel_not_contains: String

  """All values starting with the given string."""
  vowel_starts_with: String

  """All values not starting with the given string."""
  vowel_not_starts_with: String

  """All values ending with the given string."""
  vowel_ends_with: String

  """All values not ending with the given string."""
  vowel_not_ends_with: String
}

input WordWhereUniqueInput {
  id: ID
  word: String
}
